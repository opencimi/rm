Manual changes to the *.xsd generated by EA:
- primitive-types
	- should contain simple type mappings to xs types for String, Boolean Byte, Character, Real, Integer
	- <dataType> are not exported by XSD, these are technology specific anyhow
	  manually create the XSD primitive-types.xsd 
- data-value-types.xsd
	- include primitive-types
	- INTERVAL_VALUE remove <T> for lower/upper
- core
	- include data-value-types
	- include party
	- ELEMENT.value has type set to xs:string, should be DATA_VALUE
- party
	- include data-value-types
	- include core
- cimi-rm
	- include core (and through core all the others get imported)
	
	
Only add <xs:element> for LOCATABLE classes, since those can be root elements.
Data-Value-Types cannot be root elements.
This can be done by unchecking "Generate global element for all global ComplexTypes",
and stereotyping EVERY LOCATABLE class with "XSDtopLevelElement". 
  ^- the stereotype is not inherited :-(

--------------------
Example XML ideas:

CIMI Instance (XML options)
- ITS for CIMI models: CIMI RM as XSD, Clinical Models as XSD.
- Use business names (LOCATABLE.name attribute) or CIMI RM names.
- Reference instances or include.

--
<ENTRY archetype_node_id="1.1.1:123" name="LabResult" instance_id="2.3.2:433">
  <LINK meaning="AssociatedOrder" target="id:1.1.1:555" target_instance_id="11.1.1:100"/>
</ENTRY>
--
<LabResult archetype_node_id="1.1.1:123" instance_id="2.3.2:433" xsi:type="ËNTRY">
  <AssociatedOrder target="id:1.1.1:555" target_instance_id="11.1.1:100"/>
</LabResult>
--
<LabResult archetype_node_id="1.1.1:123" instance_id="2.3.2:433">
  <AssociatedOrder instance_id="11.1.1:100" xsi:type="LabOrderRef?"/>
</LabResult>

<LabOrder archetype_node_id="1.1.1:555" instance_id="11.1.1:100">
  < ... >
</LabOrder>
--
<LabResult archetype_node_id="1.1.1:123" instance_id="2.3.2:433">
  <AssociatedOrder archetype_node_id="1.1.1:555" instance_id="11.1.1:100" xsi:type="LabOrder">
    < ... >
  </AssociatedOrder>
</LabResult>

