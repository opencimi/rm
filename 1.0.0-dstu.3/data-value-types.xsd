<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:annotation>
		<xs:documentation>The Data Value Type package includes a set of clearly defined data types, which underly all other models. These data types provides both general and clinically specific types required for all kinds of health information. The following categories of data types are defined in the data types reference model. 
Text: plain text, codeable text, code phrase 
Quantities: any ordered type including ordinal values (used for representing symbolic ordered 
values such as  + ,  ++ ,  +++ ), measured quantities with values and units. 
Date/times: date, time, date-time types, and partial date/time types. 
Encapsulated data: multimedia, parsable content. 
Basic types: boolean, URI, identifier. </xs:documentation>
	</xs:annotation>
	<xs:include schemaLocation="primitive-types.xsd"/>
	<xs:complexType name="DATA_VALUE" abstract="true">
		<xs:annotation>
			<xs:documentation>Serves as a common ancestor of all data value types in the CIMI model.</xs:documentation>
		</xs:annotation>
		<xs:sequence/>
	</xs:complexType>
	<xs:complexType name="YESNO">
		<xs:annotation>
			<xs:documentation>Values which represent boolean data, such as true/false or yes/no. For such data, it is important to devise the meanings (usually questions in subjective data) carefully, so that the only allowed results are in fact true or false. The YESNO class should not be used as a replacement for naively modelled enumerated types such as male/female etc. Such values should be coded.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DATA_VALUE">
				<xs:sequence>
					<xs:element name="value" type="Boolean" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Boolean value of this item. Actual values may be language or implementation dependent.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IDENTIFIER">
		<xs:annotation>
			<xs:documentation>A type for representing identifiers of real-world entities. Typical identifiers include drivers licence number, social security number, veterans affairs number, prescription id, order id, and so on. IDENTIFIER is used to represent any identifier of a real thing, issued by some authority or agency. IDENTIFIER is not used to express identifiers generated by the infrastructure to refer to information items; the types OBJECT_ID and OBJECT_REF and subtypes are defined for this purpose.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DATA_VALUE">
				<xs:sequence>
					<xs:element name="id" type="String" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The identifier value. Often structured, according to the definition of the issuing authority's rules. </xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="type" type="xs:string" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The identifier type, such as prescription id, or  Social Security Number.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="issuer" type="String" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Authority which issues the kind of id used in the id field of this object. </xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ENCAPSULATED" abstract="true">
		<xs:annotation>
			<xs:documentation>Abstract class defining the common meta-data of all types of encapsulated data.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DATA_VALUE">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MULTIMEDIA">
		<xs:annotation>
			<xs:documentation>A specialisation of ENCAPSULATED for audiovisual and biosignal types. Includes further metadata relating to multimedia types which are not applicable to other subtypes of ENCAPSULATED.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ENCAPSULATED">
				<xs:sequence>
					<xs:element name="alternate_text" type="String" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Text to display in lieu of multimedia display/replay.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="data" type="xs:byte" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>The actual data that represents the multimedia item. If the multimedia item has a uri, then this is the data found at this uri.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="media_type" type="CODED_TEXT" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Data media type coded from the IANA MIME types code set. </xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="uri" type="URI" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>URI reference to electronic information stored outside the record as a file, database entry etc, if supplied as a reference. </xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PARSABLE">
		<xs:annotation>
			<xs:documentation>Encapsulated data expressed as a parsable String. The internal model of the data item is not described in the model, because the form of the data is assumed to be plaintext, rather than compressed or other types of large binary data. </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ENCAPSULATED">
				<xs:sequence>
					<xs:element name="formalism" type="xs:string" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The name of the formalism, e.g.  GLIF 1.0, Proforma.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="value" type="String" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The string which can be parsed according to the given formalism. The value may validly be empty in some syntaxes.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TEXT" abstract="true">
		<xs:annotation>
			<xs:documentation>A text item, which may contain any amount of legal characters. TEXT may either be coded, codeable or plain.

A text item, which may either be a plain string value (with optional term mappings), or text that has been coded according to a given terminology.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="STRING_VALUE">
				<xs:sequence>
					<xs:element name="language" type="CODED_TEXT" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>An optional indicator of the localised language in which the value is written. Only used when either the text object is in a different language from the enclosing ENTRY, or the text object is being used outside of an ENTRY or other enclosing structure which indicates the language. </xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="mapping" type="TERM_MAPPING" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TERM_MAPPING">
		<xs:annotation>
			<xs:documentation>Represents a coded term mapped to a CODEABLE_TEXT, and the relative match of the tar- 
get term with respect to the mapped item. Plain or coded text items may appear for which one or more mappings in alternative terminologies are required. 
Used for adding classification terms (e.g. adding ICD classifiers to SNOMED CT descriptive terms), or mapping into equivalents in other terminologies (e.g. 
across nursing vocabularies).</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="match" type="xs:string" minOccurs="1" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>The relative accuracy with which the target term matches with the respective mapped text item. Valid values include:
     &gt;': the mapping is to a broader term, e.g. original text = arbovirus infection , target =  viral infection  
     =': the mapping is equivalent to the original item 
     &lt;': the mapping is to a narrower term, e.g. original text = diabetes , mapping =  diabetes mellitus . 
     ?': the kind of mapping is unknown. 
The first three values are taken from the ISO standards 2788 ( Guide to Establishment and development of monolingual thesauri ) and 5964 (Guide to Establishment and development of multilingual thesauri ). </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="purpose" type="CODED_TEXT" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>The purpose of the mapping e.g.  automated data mining ,  billing, interoperability.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="target" type="CODED_TEXT" minOccurs="1" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CODED_TEXT">
		<xs:annotation>
			<xs:documentation>A single code, or a code expression from a given terminology.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="TEXT">
				<xs:sequence>
					<xs:element name="code" type="String" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The key used by the terminology service to identify a concept or coordination of concepts. This string is most likely parsable inside the terminology service, but nothing can be assumed about its syntax outside that context. </xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="terminology_id" type="xs:string" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The terminology from which the codes in the code_string were extracted.
An identifier for a terminology system, such as accessed via a terminology query service. In this class, the value attribute identifies the Terminology in the terminology service, e.g. SNOMED-CT. A terminology is assumed to be in a particular language, which must be explicitly specified. 
Lexical form:    name [  (' version  )' ] </xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="terminology_version" type="String" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The version of the terminology from which the codes in the code_string were extracted.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="term" type="String" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The string of characters associated with the code_string from the given terminology. This only needs to be provided if it is different from TEXT.value.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="term_id" type="String" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The unique identifier of the term associated with the code_string from the given terminology. In SNOMED CT this is used to record the Description Id of the Term.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ORDERED_VALUE" abstract="true">
		<xs:annotation>
			<xs:documentation>An abstract class defining the concept of ordered values, which includes ordinals as well as 
true quantities. </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DATA_VALUE">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ORDINAL">
		<xs:annotation>
			<xs:documentation>Used to represent model rankings and scores, e.g. pain, Apgar values, where there is a) implied ordering, b) no implication that the distance between each value is constant, and c) the total number of values is finite. Note that although the term  'ordinal' in mathematics means natural numbers only, here any integer is allowed, since negative and zero values are often used 
by medical professionals for values around a neutral point. Examples of sets of ordinal values: 
    -3, -2, -1, 0, 1, 2, 3 -- reflex response values 
    0, 1, 2                       -- Apgar values 
This class is used for recording any clinical datum which is customarily recorded using symbolic values. Example: the results on a urinalysis strip, e.g. {neg, trace, +, ++, +++} are used for leucocytes, protein, nitrites etc; for non-haemolysed blood {neg, trace, moderate}; for haemolysed blood small, moderate, large}. </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ORDERED_VALUE">
				<xs:sequence>
					<xs:element name="symbol" type="CODED_TEXT" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The coded textual representation of this value in the enumeration, which may be strings made from  + symbols, or other enumerations of terms such 
as  mild ,  moderate ,  severe , or even the same number series as the values, e.g.  1 ,  2 ,  3 .</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="value" type="Real" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Value in ordered enumeration of values. Any integer value can be used. </xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="QUANTIFIED" abstract="true">
		<xs:annotation>
			<xs:documentation>An abstract class defining the concept of true quantified values, i.e. values which are not only ordered, but which have a precise magnitude.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ORDERED_VALUE">
				<xs:sequence>
					<xs:element name="value_status" type="String" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The optional status of the magnitude with possible values: 
     =  :   magnitude is a point value 
     &lt;  :   value is &lt; magnitude 
     &gt;  :   value is &gt; magnitude 
     &lt;=  : value is &lt;= magnitude 
     &gt;=  : value is &gt;= magnitude 
     ~  :   value is approximately magnitude 
If not present, meaning is  = . </xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PROPORTION">
		<xs:annotation>
			<xs:documentation>Models a ratio of values, i.e. where the numerator and denominator are both pure numbers. Used for recording titers (e.g. 1:128), concentration ratios, e.g. Na:K (unitary denominator), albumin:creatinine ratio, and percentages, e.g. red cell distirbution width (RDW). 
Should not be used to represent things like blood pressure which are often written using a  /' character, giving the misleading impression that the item is a ratio, when in fact it is a structured value. E.g. visual acuity  6/24  is not a ratio. Should not be used for formulations. </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AMOUNT">
				<xs:sequence>
					<xs:element name="numerator" type="Real" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The numerator of the ratio.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="denominator" type="Real" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The denominator of the ratio.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="precision" type="Integer" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The precision  to  which  the  numerator and denominator values of  the proportion are expressed, in terms of the number  of decimal places. The value 0 implies an integral quantity. The value -1 implies no limit, i.e. any number of decimal places. </xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="type" type="CODED_TEXT" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Indicates the semantic type of the proportion. Valid values include: ratio, unitary, percent, fraction, integer_fraction</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AMOUNT" abstract="true">
		<xs:annotation>
			<xs:documentation>Abstract class defining the concept of relative quantified amounts'. For relative quantities, the  +' and  -' operators are defined (unlike descendants of ABSOLUTE_QUANTITY, 
such as the date/time types). </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="QUANTIFIED">
				<xs:sequence>
					<xs:element name="accuracy" type="Real" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Accuracy of the measurement, expressed either 
as a half-range percent value (i.e. accuracy_is_percent = True) or a half-range quantity. A value of 0 means that accuracy was not recorded. </xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="accuracy_is_percent" type="Boolean" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>If True, this indicates that when this object was created, accuracy was recorded as a percent value; if False, as an absolute quantity value.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="QUANTITY">
		<xs:annotation>
			<xs:documentation>A type representing a quantity, i.e. a measure which includes both a numeric magnitude and a coded units. The quantity's units may be represented in any code system, including the Unified Code for Units of Measure (UCUM), and SNOMED CT. Quantities can also be used for time durations, where the units represents a temporal measure (e.g. seconds, minutes, hours, days, months, years).</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AMOUNT">
				<xs:sequence>
					<xs:element name="value" type="xs:string" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The numeric size of the quantity.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="units" type="CODED_TEXT" minOccurs="1" maxOccurs="1"/>
					<xs:element name="precision" type="Integer" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The precision to which the value of the quantity is expressed, as a number of significant figures.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="COUNT">
		<xs:annotation>
			<xs:documentation>A countable quantity. Used for countable types, such as number of pregnancies, number of steps (taken by a physiotherapy patient), and number of cigarettes smoked in a day. Not to be used for amounts of physical entities (which have units).</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AMOUNT">
				<xs:sequence>
					<xs:element name="value" type="Integer" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DURATION">
		<xs:annotation>
			<xs:documentation>Represents a period of time with respect to a notional point in time, which is not specified. A sign may be used to indicate the duration is  backwards  in time rather than forwards. </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="QUANTITY">
				<xs:sequence>
					<xs:element name="duration_text" type="String" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>A string representing an ISO8601 duration.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DATE">
		<xs:annotation>
			<xs:documentation>Represents an absolute point in time, as measured on the Gregorian calendar, and specified only to the day. Semantics defined by ISO 8601. Used for recording dates in real world time. The partial form is used for approximate birth dates, dates of death, etc. 

value constrained to: The ISO 8601 date string.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DATE_TIME">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TIME">
		<xs:annotation>
			<xs:documentation>Represents an absolute point in time from an origin usually interpreted as meaning the start of the current day, specified to the second. Semantics defined by ISO 8601. Used for recording real world times, rather than scientifically measured fine amounts of time. The partial form is used for approximate times of events and 
substance administrations. 

value constrained to: The ISO 8601 time string.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DATE_TIME">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DATE_TIME">
		<xs:annotation>
			<xs:documentation>Represents an absolute point in time, specified to the second. Semantics defined by ISO 8601. Used for recording a precise point in real world time, and for approximate time stamps.

value constrained to: The ISO8601 date/time string.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="QUANTIFIED">
				<xs:sequence>
					<xs:element name="value" type="xs:string" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="URI">
		<xs:annotation>
			<xs:documentation>A data type used for referring to information resources. The URI type allows data values which are references to objects on the world wide web to be created. Its specialisation, EHR_URI, enables any element to be identified in the same way as other objects on the web. The EHR_URI type is convenient, because it is a string, like any other URI, and is therefore easily transportable and processable. Because it has its own scheme space (i.e. ehr), instances can be globally unique, as long as EHR identification is globally unique. EHR_URIs are used to express all runtime paths in the EHR.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="STRING_VALUE">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="EHR_URI">
		<xs:annotation>
			<xs:documentation>A URI which has the scheme name ehr, and which can 
only reference elements in EHRs. Used to reference elements in an EHR, which may be the current one, or another.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="URI">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="STRING_VALUE" abstract="true">
		<xs:complexContent>
			<xs:extension base="DATA_VALUE">
				<xs:sequence>
					<xs:element name="value" type="xs:string" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The displayable rendition of the text item, regardless of its underlying structure. Defined as unicode text.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="INTERVAL_VALUE">
		<xs:annotation>
			<xs:documentation>Generic class defining an interval (i.e. range) of a comparable type. An interval is used to define intervals of dates, times, quantities and so on. The type parameter, T, must be a descendant of the type ORDERED, which is necessary (but not sufficient) for instances to be compared (strictly_comparable is 
also needed). Without the INTERVAL class, quite a few more classes would be needed to express logical intervals, namely interval versions of all the date/time classes, and of quantity classes. Further, it allows the semantics of intervals to be stated in one place unequivocally, including the conditions for strict comparison.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DATA_VALUE">
				<xs:sequence>
					<xs:element name="upper_unbounded" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
					<xs:element name="lower_unbounded" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
					<xs:element name="upper_included" type="Boolean" minOccurs="1" maxOccurs="1"/>
					<xs:element name="lower_included" type="Boolean" minOccurs="1" maxOccurs="1"/>
					<xs:element name="lower" type="ORDERED_VALUE" minOccurs="0" maxOccurs="1"/>
					<xs:element name="upper" type="ORDERED_VALUE" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PLAIN_TEXT">
		<xs:annotation>
			<xs:documentation>A string of characters, written in a particular language, without any associated coding.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="TEXT">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="TermMappingMatchEnum">
		<xs:restriction base="xs:string">
			<xs:enumeration value="&gt;"/>
			<xs:enumeration value="="/>
			<xs:enumeration value="&lt;"/>
			<xs:enumeration value="?"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="QuantifiedValueStatusEnum">
		<xs:restriction base="xs:string">
			<xs:enumeration value="="/>
			<xs:enumeration value="&lt;"/>
			<xs:enumeration value="&gt;"/>
			<xs:enumeration value="&lt;="/>
			<xs:enumeration value="&gt;="/>
			<xs:enumeration value="~"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
